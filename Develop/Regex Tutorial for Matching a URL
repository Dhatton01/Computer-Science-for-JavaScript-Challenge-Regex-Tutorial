# Regex Tutorial for Matching a URL

This tutorial aims to provide an understanding of the regular expression, a pattern used to match against a subject string in a left-to-right fashion. Regular expressions serve various purposes such as text replacement, form validation, substring extraction based on pattern matching, and more. To avoid the verbosity of the term "regular expression," it is commonly abbreviated as "regex" or "regexp." This tutorial focuses on explaining the functionality of a regex designed for matching a URL. Each component of the expression is dissected and its purpose is described.

## Summary

This tutorial elucidates the regex, a sequence of characters that defines the specific search pattern for matching a URL: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/. These characters, known as metacharacters, go beyond representing literal characters and instead represent more generalized patterns. Regex is frequently employed to validate input, whether it is utilized in code or search algorithms. With regex, one can identify specific patterns of characters within a string or locate and replace a particular character or sequence of characters within a string.

## Table of Contents

- [Anchors](#anchors)
- [Quantifiers](#quantifiers)
- [Bracket Expressions](#bracket-expressions)
- [Character Classes](#character-classes)
- [Grouping and Capturing](#grouping-and-capturing)


## Regex Components

Components of a regex matching a URL include:
* Anchors ```^``` ```$```
* Quantifiers ```*``` ```+``` ```?``` ```{}```
* Bracket expressions ```[]```
* Character classes ```\d``` ```\w``` ```.```
* Grouping and capturing ```()```

### Anchors
The caret symbol `^` serves as a check to determine if the matched character is the initial character of the input, while the dollar sign `$` acts as a check to verify if the matched character is the final character of the input string.

Within the URL regular expression, we observe that two slashes appear at the start and end, as exemplified by `/wlk/`. These slashes function as markers or boundaries that indicate the commencement and conclusion of the regular expression pattern. Subsequently, we encounter `^` and `$` symbols at these respective ends, signifying the presence of the search pattern enclosed between these characters.

### Quantifiers
Quantifiers are used to indicate the number of characters that should be present in a string. The * quantifier matches a string that contains 0 or more occurrences of the preceding character before the * metacharacter. For instance, wlk* matches a string that consists of wl followed by 0 or more k characters.

The + quantifier matches a string that has 1 or more occurrences of the preceding character before the + metacharacter. For example, wlk+ matches a string that contains wl followed by 1 or more k characters.

The ? quantifier matches a string that has 0 or 1 occurrence of the preceding character before the ? metacharacter. In the URL regex, this quantifier can be found in the first capturing group, (https?:\/\/), after the "s" character, indicating that the "s" after "http" is optional. It is also present after the first capturing group in the URL regex, /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/, to indicate that the entire first capturing group is optional. Lastly, it appears at the end of the regex, /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/, to denote the optionally escaped / at the end of the URL.

The {} quantifier matches a string that contains the preceding character a specific number of times indicated within the curly brackets. For example, wlk{2} matches a string that has wl followed by exactly 2 k characters.

The {} quantifier can also be used with a comma , after the number inside the curly brackets. For instance, wlk{5,} matches a string that contains wl followed by 5 or more k characters. Similarly, wlk{5,10} matches a string that has wl followed by 5 to 10 k characters.

Characters can also be grouped using () to specify a particular sequence that should repeat a certain number of times, depending on the used quantifier. For example, w(lk)* matches a string that begins with w followed by 0 or more repetitions of the sequence lk. When combined with {}, w(lk){5,10} matches a string that starts with w followed by 5 to 10 repetitions of the sequence lk.

### Bracket expressions

Square brackets serve the purpose of defining character sets in regular expressions. By utilizing a hyphen inside the brackets, it becomes possible to specify a range of characters. The order of the characters within the range does not impact the functionality. To illustrate, consider the regular expression [Ww]lk, which signifies either an uppercase W or lowercase w, followed by the letter l, and then the letter k.

### Character Classes

The character class \d corresponds to a single character that represents a digit, ranging from 0 to 9.

The character class \w represents a single word character, which can be either alphanumeric or an underscore.

### Grouping and Capturing